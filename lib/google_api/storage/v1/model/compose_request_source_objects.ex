# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.Storage.V1.Model.ComposeRequestSourceObjects do
  @moduledoc """


  ## Attributes

  *   `generation` (*type:* `String.t`, *default:* `nil`) - The generation of this object to use as the source.
  *   `name` (*type:* `String.t`, *default:* `nil`) - The source object's name. All source objects must reside in the same bucket.
  *   `objectPreconditions` (*type:* `GoogleApi.Storage.V1.Model.ComposeRequestSourceObjectsObjectPreconditions.t`, *default:* `nil`) - Conditions that must be met for this operation to execute.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :generation => String.t(),
          :name => String.t(),
          :objectPreconditions =>
            GoogleApi.Storage.V1.Model.ComposeRequestSourceObjectsObjectPreconditions.t()
        }

  field(:generation)
  field(:name)

  field(
    :objectPreconditions,
    as: GoogleApi.Storage.V1.Model.ComposeRequestSourceObjectsObjectPreconditions
  )
end

defimpl Poison.Decoder, for: GoogleApi.Storage.V1.Model.ComposeRequestSourceObjects do
  def decode(value, options) do
    GoogleApi.Storage.V1.Model.ComposeRequestSourceObjects.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Storage.V1.Model.ComposeRequestSourceObjects do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
